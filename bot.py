import os
import base64
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from flask import Flask
from threading import Thread
from google import genai

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.getenv("TELEGRAM_TOKEN")
GENAI_KEY = os.getenv("GENAI_API_KEY")

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
client = genai.Client(api_key=GENAI_KEY)

# –ü—Ä–æ—Å—Ç–∞—è ¬´–±–∞–∑–∞ –±–∞–ª–∞–Ω—Å–æ–≤¬ª
user_balance = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üé¨ –ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")],
        [KeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
    ],
    resize_keyboard=True
)

start_anim_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é")],
        [KeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
    ],
    resize_keyboard=True
)

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    user_balance[message.from_user.id] = user_balance.get(message.from_user.id, 35)  # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–≤–∏—Ç —Ç–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∏‚ú®\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏: <b>35 —Ä—É–±–ª–µ–π</b>.",
        reply_markup=main_kb
    )

@dp.message(F.text == "üé¨ –ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
async def ask_photo(message: types.Message):
    await message.answer("üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏.")

@dp.message(F.photo)
async def handle_photo(message: types.Message, state=None):
    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    photo_bytes = await bot.download_file(file_path)
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message.bot["last_photo"] = photo_bytes.read()
    await message.answer("‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ.\n–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ ¬´üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é¬ª.", reply_markup=start_anim_kb)

@dp.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é")
async def animate_photo(message: types.Message):
    uid = message.from_user.id
    if user_balance.get(uid, 0) < 35:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.", reply_markup=main_kb)
        return

    photo_bytes = message.bot.get("last_photo")
    if not photo_bytes:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")
        return

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∏–º–∞—Ü–∏—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç –≤ Gemini
        resp = client.models.generate_content(
            model="gemini-1.5-pro",
            contents=[{
                "role": "user",
                "parts": [
                    {"mime_type": "image/jpeg", "data": photo_bytes},
                    {"text": "–°–¥–µ–ª–∞–π –∞–Ω–∏–º–∞—Ü–∏—é —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ 5 —Å–µ–∫—É–Ω–¥."}
                ]
            }],
            generation_config={"response_mime_type": "video/mp4"}
        )

        video_b64 = resp.candidates[0].content.parts[0].data
        video_bytes = base64.b64decode(video_b64)

        # —Å–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
        user_balance[uid] -= 35

        await message.answer_video(video_bytes, caption="‚ú® –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ—è –∞–Ω–∏–º–∞—Ü–∏—è.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

# --- Flask ¬´–ø–∏–Ω–≥¬ª ---
app = Flask(__name__)

@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    # Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_flask).start()
    # aiogram
    asyncio.run(dp.start_polling(bot))
