from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio
import os

from google import genai
import time

BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

client = genai.Client(api_key=GOOGLE_API_KEY)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class AnimatePhoto(StatesGroup):
    waiting_photo = State()
    waiting_confirm = State()

# --- –ü—Ä–æ—Å—Ç–∞—è "–±–∞–∑–∞ –±–∞–ª–∞–Ω—Å–æ–≤" (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞) ---
user_balances = {}

def get_balance(user_id):
    return user_balances.get(user_id, 100)  # —Å—Ç–∞—Ä—Ç–æ–≤–æ 100 ‚ÇΩ –¥–ª—è —Ç–µ—Å—Ç–∞

def update_balance(user_id, amount):
    user_balances[user_id] = get_balance(user_id) + amount

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    kb = [
        [InlineKeyboardButton(text="üñº –ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", callback_data="animate")],
        [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# --- /start ---
@dp.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –æ–∂–∏–≤–∏—Ç –ª—é–±—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ ‚Äî 35 ‚ÇΩ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

# --- –ö–Ω–æ–ø–∫–∏ ---
@dp.callback_query()
async def callbacks(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if callback.data == "animate":
        await callback.message.answer("üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É).")
        await state.set_state(AnimatePhoto.waiting_photo)

    elif callback.data == "topup":
        await callback.message.answer("üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é. (–∑–∞–≥–ª—É—à–∫–∞)")

    elif callback.data == "start_animation":
        balance = get_balance(user_id)
        if balance < 35:
            await callback.message.answer("‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ 35 ‚ÇΩ.", 
                                          reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                              [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup")]
                                          ]))
        else:
            await callback.message.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∏–º–∞—Ü–∏—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            data = await state.get_data()
            photo_url = data.get("photo_url")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
            try:
                video_url = generate_video_from_photo(photo_url, "–ê–Ω–∏–º–∏—Ä—É–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫—Ä–∞—Å–∏–≤–æ")
                update_balance(user_id, -35)
                await callback.message.answer_video(video_url, caption="‚úÖ –ì–æ—Ç–æ–≤–æ! 35 ‚ÇΩ —Å–ø–∏—Å–∞–Ω–æ.")
            except Exception as e:
                await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

            await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ---
@dp.message(StateFilter(AnimatePhoto.waiting_photo))
async def handle_photo(message: Message, state: FSMContext):
    user_id = message.from_user.id
    file = await bot.get_file(message.photo[-1].file_id)
    photo_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
    await state.update_data(photo_url=photo_url)

    balance = get_balance(user_id)
    if balance < 35:
        await message.answer("‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏.", 
                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                 [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup")]
                             ]))
        await state.clear()
    else:
        await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ ‚ñ∂ –ù–∞—á–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é", 
                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                 [InlineKeyboardButton(text="‚ñ∂ –ù–∞—á–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é", callback_data="start_animation")]
                             ]))
        await state.set_state(AnimatePhoto.waiting_confirm)

# --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Veo ---
def generate_video_from_photo(photo_url, description):
    response = client.models.generate_content(
        model="veo-2",
        contents=[
            {"role": "user", "parts": [
                {"text": description},
                {"file_data": {"mime_type": "image/jpeg", "file_uri": photo_url}}
            ]}
        ],
        config={
            "video_config": {"duration_seconds": 5, "fps": 24}
        }
    )

    operation_id = response.operation.name
    while True:
        op = client.operations.get(name=operation_id)
        if op.done:
            break
        time.sleep(5)

    return op.response["video"]["uri"]

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
